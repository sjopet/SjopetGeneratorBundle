<?php
/*
 * This file was generated by the SjopetSoapClientGeneratorBundle.
 *
 * Sjoerd Peters <speters@sjopet.net>
 * 23-02-2012
 *
 * For more information please visit:
 * https://bitbucket.org/sjopet/sf2bundle-soap-client-generator
 */

namespace {{ namespace }}\Parameters;

use Symfony\Component\Validator\Constraints as Assert;
use {{ namespace }}\ParameterInterface;

class {{ class }} implements ParameterInterface
{

{%- for property in properties %}
    /**
     * @var {% if property.custom %}\{{ namespaceModel }}\{% endif %}{{ property.type }} {{ property.name }}
     * @Assert\Type(type="{% if property.custom and property.assert == property.type %}\{{ namespaceModel }}\{% endif %}{{ property.assert }}", message="Type violation, expected parameter of type {{ property.assert }}")
     */
    protected {{ property.name }};
{% endfor %}

    /**
     * @return array
     */
    public function getArguments()
    {
        $args = array();
        {% for property in properties -%}
            $args['{{ property.xmlName }}'] = $this->get{{ property.funcName }}();
        {% endfor -%}
        return $args;
    }
{% for property in properties %}
    /**
     * @param {% if property.custom %}\{{ namespaceModel }}\{% endif %}{{ property.type }} {{ property.name }}
     * @return \{{ namespace }}\Parameters\{{ class }}
     */
    public function set{{ property.funcName }}({{ property.name }})
    {
        $this->{{ property.name | slice(1, property.name | length)}} = {{ property.name }};
        return $this;
    }

    /**
     * @return {% if property.custom %}\{{ namespaceModel }}\{% endif %}{{ property.type }}
     */
    public function get{{ property.funcName }}()
    {
        return $this->{{ property.name | slice(1, property.name | length)}};
    }
{% endfor -%}
}
